package main

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"os"
	"strings"
	"time"

	"github.com/chromedp/chromedp"
	"github.com/gin-contrib/cors"
	"github.com/gin-gonic/gin"
	"github.com/joho/godotenv"
	//"github.com/rs/cors"
)

type AutoGenerated []struct {
	Descripton string `json:"descripton"`
	Mfgprt     string `json:"mfgprt"`
	List       string `json:"list"`
	Cost       string `json:"cost"`
	Extend     string `json:"extend"`
}

func main() {

	gin.SetMode(gin.ReleaseMode)

	router := gin.Default()
	config := cors.DefaultConfig()
	config.AllowOrigins = []string{"http://localhost:3000"} // Replace with your frontend URL
	config.AllowMethods = []string{"GET", "OPTIONS"}

	router.Use(cors.New(config))

	router.GET("/", func(c *gin.Context) {

		key := strings.TrimSpace(c.Query("key"))

		err := godotenv.Load("local.env")
		if err != nil {
			log.Fatalf("Some error occured. Err: %s", err)
		}
		username := os.Getenv("USERNAME")
		password := os.Getenv("PASSWORD")

		fmt.Println(username)

		opts := append(

			chromedp.DefaultExecAllocatorOptions[:],

			// chromedp.DefaultExecAllocatorOptions[3:],
			// chromedp.NoFirstRun,
			// chromedp.NoDefaultBrowserCheck,
			chromedp.UserDataDir("./dir"),
		)

		parentCtx, cancel := chromedp.NewExecAllocator(context.Background(), opts...)
		defer cancel()
		ctx, cancel := chromedp.NewContext(parentCtx)
		defer cancel()

		// files, err := os.ReadDir("./dir")
		// if err != nil {
		// 	fmt.Println(err)
		// 	return
		// }

		if 1+1 == 2 {
			fmt.Println("Directory is empty.")
			tasks1 := chromedp.Tasks{
				chromedp.Navigate("http://www.iautoparts.biz/pronto/entrepot/WAW"),
				chromedp.SendKeys("input[name=username]", username),
				chromedp.SendKeys("input[name=password]", password),
				chromedp.Submit("input[type=submit]"),
				chromedp.Click("td[class=NavSubTab]", chromedp.NodeVisible),
				chromedp.SendKeys("input[name=pn0]", key),
				chromedp.Submit("input[name=pn0]"),
			}

			if err := chromedp.Run(ctx, tasks1); err != nil {
				panic(err)
			}

		} else {
			fmt.Println("Directory is not empty.")

			tasks2 := chromedp.Tasks{
				chromedp.Navigate("http://www.iautoparts.biz/pronto/entrepot/WAW"),
				chromedp.Click("td[class=NavSubTabSelected]", chromedp.NodeVisible),
				chromedp.SendKeys("input[name=pn0]", key),
				chromedp.Submit("input[name=pn0]"),
			}

			if err := chromedp.Run(ctx, tasks2); err != nil {
				panic(err)
			}
		}

		time.Sleep(14 * time.Second)

		var str string

		if err := chromedp.Run(ctx, chromedp.Evaluate(`
			let o = window.frames[1].document.querySelectorAll("tbody");
			let arr = [];

			for(let i = 1 ;i<o.length; i++ ){

				let Descripton=(o[i].querySelector(".PartDesc").innerText).replace("­","");
				let Mfgprt =(o[i].querySelector(".WidPN").innerText).replace("­","");
				//o[i].querySelector(".PartInqE.WidSN").innerText.replace("­","");
				let p = o[i].querySelectorAll(".WidPrice");
				let List=p[0].innerText.replace("­","");
				let Cost=p[1].innerText.replace("­","");
				let Extend=p[2].innerText.replace("­","");

				arr.push({Descripton, Mfgprt, List, Cost, Extend});
			}

				JSON.stringify(arr)
			`, &str)); err != nil {
			panic(err)
		}

		var datata AutoGenerated

		json.Unmarshal([]byte(str), &datata)

		json.Marshal(datata)

		c.JSON(http.StatusOK, datata)
	})

	log.Fatal(router.Run(":8080"))
}
